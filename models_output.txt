# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class AccountsComplaint(models.Model):
    id = models.BigAutoField(primary_key=True)
    description = models.TextField()
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    resolved_at = models.DateTimeField(blank=True, null=True)
    complainant = models.ForeignKey('AccountsUser', models.DO_NOTHING)
    defendant = models.ForeignKey('AccountsUser', models.DO_NOTHING, related_name='accountscomplaint_defendant_set')

    class Meta:
        managed = False
        db_table = 'accounts_complaint'


class AccountsNotification(models.Model):
    id = models.BigAutoField(primary_key=True)
    message = models.TextField()
    is_read = models.BooleanField()
    created_at = models.DateTimeField()
    user = models.ForeignKey('AccountsUser', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_notification'


class AccountsReview(models.Model):
    id = models.BigAutoField(primary_key=True)
    rating = models.IntegerField()
    comment = models.TextField()
    created_at = models.DateTimeField()
    reviewed = models.ForeignKey('AccountsUser', models.DO_NOTHING)
    reviewer = models.ForeignKey('AccountsUser', models.DO_NOTHING, related_name='accountsreview_reviewer_set')

    class Meta:
        managed = False
        db_table = 'accounts_review'


class AccountsUser(models.Model):
    id = models.BigAutoField(primary_key=True)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.BooleanField()
    first_name = models.CharField(max_length=150)
    last_name = models.CharField(max_length=150)
    is_staff = models.BooleanField()
    is_active = models.BooleanField()
    date_joined = models.DateTimeField()
    username = models.CharField(unique=True, max_length=150)
    email = models.CharField(unique=True, max_length=254)
    password = models.CharField(max_length=128)
    role = models.CharField(max_length=20)
    language_preference = models.CharField(max_length=10)
    phone_number = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField(blank=True, null=True)
    full_name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'accounts_user'


class AccountsUserGroups(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING)
    group = models.ForeignKey('AuthGroup', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_user_groups'
        unique_together = (('user', 'group'),)


class AccountsUserUserPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'accounts_user_user_permissions'
        unique_together = (('user', 'permission'),)


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=150)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    id = models.BigAutoField(primary_key=True)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AccountsUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    id = models.BigAutoField(primary_key=True)
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class InvestorInvestmentoffer(models.Model):
    id = models.BigAutoField(primary_key=True)
    amount = models.DecimalField(max_digits=12, decimal_places=2)
    equity_percentage = models.DecimalField(max_digits=5, decimal_places=2)
    additional_terms = models.TextField(blank=True, null=True)
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    project = models.ForeignKey('ProjectownerProject', models.DO_NOTHING)
    investor = models.ForeignKey('InvestorInvestor', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'investor_investmentoffer'


class InvestorInvestor(models.Model):
    id = models.BigAutoField(primary_key=True)
    company_name = models.CharField(max_length=255)
    commercial_register = models.CharField(max_length=100)
    phone_number = models.CharField(max_length=20)
    profile_picture = models.CharField(max_length=100, blank=True, null=True)
    user = models.OneToOneField(AccountsUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'investor_investor'


class InvestorNegotiation(models.Model):
    id = models.BigAutoField(primary_key=True)
    message = models.TextField()
    timestamp = models.DateTimeField()
    offer = models.ForeignKey(InvestorInvestmentoffer, models.DO_NOTHING)
    sender = models.ForeignKey(AccountsUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'investor_negotiation'


class ProjectownerFeasibilitystudy(models.Model):
    id = models.BigAutoField(primary_key=True)
    current_stage = models.CharField(max_length=255)
    current_revenue = models.DecimalField(max_digits=12, decimal_places=2, blank=True, null=True)
    funding_required = models.DecimalField(max_digits=12, decimal_places=2)
    marketing_investment_percentage = models.IntegerField()
    team_investment_percentage = models.IntegerField()
    expected_monthly_revenue = models.CharField(max_length=255)
    roi_period_months = models.IntegerField()
    expected_profit_margin = models.CharField(max_length=255)
    market_size = models.CharField(max_length=255)
    growth_opportunity = models.TextField()
    created_at = models.DateTimeField()
    project = models.OneToOneField('ProjectownerProject', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'projectOwner_feasibilitystudy'


class ProjectownerProject(models.Model):
    id = models.BigAutoField(primary_key=True)
    title = models.CharField(max_length=255)
    description = models.TextField()
    status = models.CharField(max_length=20)
    created_at = models.DateTimeField()
    updated_at = models.DateTimeField()
    owner = models.ForeignKey('ProjectownerProjectowner', models.DO_NOTHING)
    category = models.CharField(max_length=50, blank=True, null=True)
    idea_summary = models.TextField(blank=True, null=True)
    problem_solving = models.TextField(blank=True, null=True)
    readiness_level = models.CharField(max_length=50, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'projectOwner_project'


class ProjectownerProjectfile(models.Model):
    id = models.BigAutoField(primary_key=True)
    file = models.CharField(max_length=100)
    uploaded_at = models.DateTimeField()
    project = models.ForeignKey(ProjectownerProject, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'projectOwner_projectfile'


class ProjectownerProjectowner(models.Model):
    id = models.BigAutoField(primary_key=True)
    bio = models.TextField()
    profile_picture = models.CharField(max_length=100, blank=True, null=True)
    id_card_picture = models.CharField(max_length=100, blank=True, null=True)
    terms_agreed = models.TextField()
    user = models.OneToOneField(AccountsUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'projectOwner_projectowner'
